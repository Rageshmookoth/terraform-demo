#!/usr/bin/env groovy
// Define variables
List category_list = ["\"Select:selected\"","\"Vegetables\"","\"Fruits\""]
List fruits_list = ["\"Select:selected\"","\"apple\"","\"banana\"","\"mango\""]
List vegetables_list = ["\"Select:selected\"","\"potato\"","\"tomato\"","\"broccoli\""]
List default_item = ["\"Not Applicable\""]
String categories = buildScript(category_list)
String vegetables = buildScript(vegetables_list)
String fruits = buildScript(fruits_list)
String items = populateItems(default_item,vegetables_list,fruits_list)
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateItems(List default_item, List vegetablesList, List fruitsList){
return """if(Categories.equals('Vegetables')){
     return $vegetablesList
     }
     else if(Categories.equals('Fruits')){
     return $fruitsList
     }else{
     return $default_item
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
        script:  categories]]],
[$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Items', referencedParameters: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]]
    ])
])

pipeline {
    agent any
    tools {
        terraform 'terraform-Rag'
    }
    parameters {
        //string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        //string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
        //choice choices: ['AWS', 'AZURE', 'OracleCloud'], description: '''Select the cloud platform
        //''', name: 'Cloud'
        choice choices: ['Production', 'Development'], description: '''Select the AWS account
        ''', name: 'account'
        choice choices: ['us-west-1', 'ap-south-1', 'eu-central-1'], description: '''Select the region
        ''', name: 'Region'
        choice choices: ['Windows', 'Linux',], description: '''Select the Operating System
        ''', name: 'Os'

        //choice choices: ['Ragesh', 'Moiz', 'Sourabh','Ramesh'], description: '''Server owner
       // ''', name: 'Owner'
        //choice choices: ['DEV-GROUP', 'IT-GROUP','UK Support','US Support'], description: '''Server Group
        //''', name: 'Group'
        string defaultValue: '', description: 'Project', name: 'Project', trim: false
        choice choices: ['t2.micro', 't2.small', 't2.medium'], description: '''Select the appropriate instance type. 
        For more information 
        https://aws.amazon.com/ec2/instance-types/ 
        ''', name: 'Configuration'
        string defaultValue: '', description: 'Input server Name', name: 'ServerName', trim: false

        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        
    }
    
    stages {
        stage('Git Checkout'){
                steps{
                   git credentialsId: 'GITHUB-RAGEH', url: 'https://github.com/Rageshmookoth/terraform-demo.git'
                }
            }
     
        stage('Plan Production') {
            
            when {
                        expression { params.account == 'Production' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('PROD-AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('PROD-AWS-SECRET-KEY')
               }
            steps {
                //script {
                //    currentBuild.displayName = params.version
                //}
                sh 'terraform init -input=false'
                //sh 'terraform workspace select ${environment}'
                sh "terraform plan -input=false -out tfplan -var 'region=${params.Region}' -var 'instance_type=${params.Configuration}' -var 'instance_name=${params.ServerName}' -var 'Group=${params.Group}' -var 'Owner=${params.Owner}' -var 'Project=${params.Project}'"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }
        stage('Plan Development') {
            
            when {
                        expression { params.account == 'Development' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('AWS-SECRET-KEY')
               }
            steps {
                //script {
                //    currentBuild.displayName = params.version
                //}
                sh 'terraform init -input=false'
                //sh 'terraform workspace select ${environment}'
                sh "terraform plan -input=false -out tfplan -var 'region=${params.Region}' -var 'instance_type=${params.Configuration}' -var 'instance_name=${params.ServerName}' -var 'Group=${params.Group}' -var 'Owner=${params.Owner}' -var 'Project=${params.Project}'"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply - Development') {
            when {
                        expression { params.account == 'Development' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('AWS-SECRET-KEY')
               }
            steps {
                sh "terraform apply -input=false tfplan"
            }
        }
        stage('Apply - Production') {
            when {
                        expression { params.account == 'Production' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('PROD-AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('PROD-AWS-SECRET-KEY')
               }
            steps {
                sh "terraform apply -input=false tfplan"
            }
        }
        stage('Remove State file') {
            steps {
                sh "rm -fr terraform.tfstate"
                sh "rm -fr .terraform.lock.hcl"
                sh "rm -fr terraform.tfstate.backup"
            }
        }
         
        
    }
    post {
    success {
        mail to: 'rageshmoorkoth@gmail.com',
             subject: "Server build completed",
             body: "Server name ${params.ServerName}"
    }
}
}
